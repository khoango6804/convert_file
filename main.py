import os
import sys
import json
from typing import List, Tuple

from utils.doc_converter import extract_text_from_doc, extract_text_from_docx
from utils.file_utils import ensure_folder_exists, move_to_error_folder
from utils.file_visualizer import visualize_data
from utils.pdf_converter import PDFConverter


def setup_folders() -> Tuple[str, str, str]:
    """Setup required folders and return their paths"""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    folders = {
        "input": os.path.join(base_dir, "data", "input"),
        "output": os.path.join(base_dir, "data", "output"),
        "error": os.path.join(base_dir, "data", "error"),
    }

    # Create folders if they don't exist
    for folder in folders.values():
        ensure_folder_exists(folder)

    return folders["input"], folders["output"], folders["error"]


def check_input_files(input_folder: str, error_folder: str) -> Tuple[List[str], bool]:
    """Check input and error folders for valid files"""
    input_files = []
    error_files = []

    # Check input folder
    for root, _, files in os.walk(input_folder):
        for file in files:
            if file.lower().endswith((".doc", ".docx", ".pdf")):
                input_files.append(os.path.join(root, file))

    # Check error folder
    for root, _, files in os.walk(error_folder):
        for file in files:
            if file.lower() != "error_log.txt" and file.lower().endswith(
                (".doc", ".docx", ".pdf")
            ):
                error_files.append(os.path.join(root, file))

    # If input is empty but error has files, process error folder
    if not input_files and error_files:
        print(
            f"‚ö†Ô∏è Th∆∞ m·ª•c input tr·ªëng. T√¨m th·∫•y {len(error_files)} file trong th∆∞ m·ª•c error."
        )
        print("üîÑ Chuy·ªÉn sang x·ª≠ l√Ω files t·ª´ th∆∞ m·ª•c error...")
        return error_files, True

    # If input has files, process those
    if input_files:
        return input_files, False

    # If both are empty
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .doc, .docx ho·∫∑c .pdf n√†o ƒë·ªÉ x·ª≠ l√Ω")
    return [], False


def process_files(files: List[str], output_folder: str, error_folder: str) -> None:
    """Process files and handle errors"""
    pdf_converter = None
    log_file = os.path.join(error_folder, "error_log.txt")

    try:
        pdf_converter = PDFConverter()

        with open(log_file, "w", encoding="utf-8") as log:
            for input_path in files:
                file = os.path.basename(input_path)
                file_lower = file.lower()

                try:
                    # Skip temporary files
                    if file_lower.startswith("~$"):
                        continue

                    # Define output path and processing function
                    if file_lower.endswith(".pdf"):
                        output_path = os.path.join(
                            output_folder, f"{os.path.splitext(file)[0]}.md"
                        )
                        result = pdf_converter.pdf_to_text(
                            input_path, output_format="md"
                        )
                        if not result:
                            raise Exception("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi PDF sang Markdown")
                    else:
                        # Handle DOC/DOCX
                        output_path = os.path.join(
                            output_folder,
                            file.replace(".docx", ".md").replace(".doc", ".md"),
                        )
                        extract_func = (
                            extract_text_from_docx
                            if file_lower.endswith(".docx")
                            else extract_text_from_doc
                        )

                        text = extract_func(input_path)
                        if text:
                            # Convert to Markdown format
                            markdown_text = f"""# {os.path.splitext(file)[0]}
                            {text}
                            """
                            with open(output_path, "w", encoding="utf-8") as md_file:
                                md_file.write(markdown_text)
                        else:
                            raise Exception("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung")

                    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {file}")

                except Exception as e:
                    error_msg = f"‚ùå L·ªói x·ª≠ l√Ω {file}: {str(e)}"
                    print(error_msg)
                    log.write(f"{error_msg}\n")
                    move_to_error_folder(input_path, error_folder)

    finally:
        if pdf_converter:
            pdf_converter.cleanup()


def create_api_json():
    """Create or update api.json file with Google API key"""
    try:
        # Get base directory
        base_dir = os.path.dirname(os.path.abspath(__file__))
        api_file = os.path.join(base_dir, "api.json")

        # Check if api.json exists and is valid
        if os.path.exists(api_file):
            try:
                with open(api_file, "r", encoding="utf-8") as f:
                    existing_config = json.load(f)
                    if existing_config.get("api_key"):
                        print("\n‚úÖ ƒê√£ t√¨m th·∫•y API key")
                        use_existing = (
                            input("B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng API key hi·ªán t·∫°i? (y/n): ")
                            .lower()
                            .strip()
                        )
                        if use_existing == "y":
                            return True
            except json.JSONDecodeError:
                print("\n‚ö†Ô∏è File api.json hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá. T·∫°o m·ªõi...")
            except Exception as e:
                print(f"\n‚ö†Ô∏è L·ªói ƒë·ªçc file api.json: {str(e)}")

        # Get API key from user
        print("\nüìù C√†i ƒë·∫∑t Google API Key")
        print("1. Truy c·∫≠p: https://makersuite.google.com/app/apikey")
        print("2. T·∫°o API key m·ªõi ho·∫∑c s·ª≠ d·ª•ng key c√≥ s·∫µn")
        api_key = input("\nüîë Nh·∫≠p API key c·ªßa b·∫°n: ").strip()

        if not api_key:
            print("‚ùå API key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return False

        # Create API configuration
        config = {"api_key": api_key}

        # Write to file
        with open(api_file, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)

        print(f"\n‚úÖ ƒê√£ l∆∞u API key v√†o: {api_file}")
        return True

    except Exception as e:
        print(f"\n‚ùå L·ªói t·∫°o file api.json: {str(e)}")
        return False


def main():
    """Main execution flow"""
    try:
        # 0. Check API configuration
        if not os.path.exists("api.json"):
            print("\n‚ö†Ô∏è Ch∆∞a c√≥ file c·∫•u h√¨nh API")
            if not create_api_json():
                print("‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c khi ch∆∞a c√≥ API key")
                return 1

        # 1. Setup folders
        print("\nüìÇ ƒêang t·∫°o th∆∞ m·ª•c...")
        input_folder, output_folder, error_folder = setup_folders()
        print("‚úÖ ƒê√£ t·∫°o xong c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt")

        # 2. Check input files
        print("\nüîç ƒêang ki·ªÉm tra file...")
        valid_files, is_error_processing = check_input_files(input_folder, error_folder)
        if not valid_files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o ƒë·ªÉ x·ª≠ l√Ω")
            print(f"‚ÑπÔ∏è Vui l√≤ng th√™m file v√†o th∆∞ m·ª•c: {input_folder}")
            return 1

        # 3. Process files
        source_folder = error_folder if is_error_processing else input_folder
        total_files = len(valid_files)
        print(f"\nüîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {total_files} files t·ª´ {source_folder}...")

        process_files(valid_files, output_folder, error_folder)
        print("\n‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω files")

        # 4. Generate visualization
        print("\nüìä ƒêang t·∫°o bi·ªÉu ƒë·ªì th·ªëng k√™...")
        visualize_data(input_folder, output_folder, error_folder)
        print("‚úÖ ƒê√£ t·∫°o xong bi·ªÉu ƒë·ªì")

        # 5. Show summary
        error_files = [f for f in os.listdir(error_folder) if not f.endswith(".md")]
        print("\nüìã T·ªïng k·∫øt:")
        print(f"- T·ªïng s·ªë file x·ª≠ l√Ω: {total_files}")
        print(f"- S·ªë file th√†nh c√¥ng: {total_files - len(error_files)}")
        print(f"- S·ªë file l·ªói: {len(error_files)}")

        if len(error_files) > 0:
            print(f"\n‚ö†Ô∏è C√°c file l·ªói ƒë∆∞·ª£c chuy·ªÉn v√†o: {error_folder}")
            print("‚ÑπÔ∏è Xem chi ti·∫øt l·ªói trong file: error_log.txt")

        return 0

    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: {str(e)}")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
        exit_code = 0
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: {str(e)}")
        exit_code = 1
    finally:
        sys.exit(exit_code)
